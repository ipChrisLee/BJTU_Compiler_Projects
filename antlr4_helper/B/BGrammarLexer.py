# Generated from BGrammar.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,219,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,
        5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
        1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,
        1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,29,1,29,1,29,1,30,4,30,175,8,30,11,30,12,30,176,
        1,31,1,31,5,31,181,8,31,10,31,12,31,184,9,31,1,32,1,32,1,32,1,32,
        1,33,1,33,1,33,1,33,5,33,194,8,33,10,33,12,33,197,9,33,1,33,3,33,
        200,8,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,210,8,34,10,
        34,12,34,213,9,34,1,34,1,34,1,34,1,34,1,34,2,195,211,0,35,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,
        4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        3,0,9,10,13,13,32,32,223,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,76,1,0,0,0,5,80,1,0,0,0,7,86,
        1,0,0,0,9,93,1,0,0,0,11,96,1,0,0,0,13,101,1,0,0,0,15,105,1,0,0,0,
        17,108,1,0,0,0,19,114,1,0,0,0,21,120,1,0,0,0,23,129,1,0,0,0,25,131,
        1,0,0,0,27,133,1,0,0,0,29,135,1,0,0,0,31,137,1,0,0,0,33,139,1,0,
        0,0,35,141,1,0,0,0,37,143,1,0,0,0,39,145,1,0,0,0,41,147,1,0,0,0,
        43,149,1,0,0,0,45,151,1,0,0,0,47,154,1,0,0,0,49,157,1,0,0,0,51,160,
        1,0,0,0,53,163,1,0,0,0,55,165,1,0,0,0,57,168,1,0,0,0,59,170,1,0,
        0,0,61,174,1,0,0,0,63,178,1,0,0,0,65,185,1,0,0,0,67,189,1,0,0,0,
        69,205,1,0,0,0,71,72,5,118,0,0,72,73,5,111,0,0,73,74,5,105,0,0,74,
        75,5,100,0,0,75,2,1,0,0,0,76,77,5,105,0,0,77,78,5,110,0,0,78,79,
        5,116,0,0,79,4,1,0,0,0,80,81,5,102,0,0,81,82,5,108,0,0,82,83,5,111,
        0,0,83,84,5,97,0,0,84,85,5,116,0,0,85,6,1,0,0,0,86,87,5,100,0,0,
        87,88,5,111,0,0,88,89,5,117,0,0,89,90,5,98,0,0,90,91,5,108,0,0,91,
        92,5,101,0,0,92,8,1,0,0,0,93,94,5,105,0,0,94,95,5,102,0,0,95,10,
        1,0,0,0,96,97,5,101,0,0,97,98,5,108,0,0,98,99,5,115,0,0,99,100,5,
        101,0,0,100,12,1,0,0,0,101,102,5,102,0,0,102,103,5,111,0,0,103,104,
        5,114,0,0,104,14,1,0,0,0,105,106,5,100,0,0,106,107,5,111,0,0,107,
        16,1,0,0,0,108,109,5,119,0,0,109,110,5,104,0,0,110,111,5,105,0,0,
        111,112,5,108,0,0,112,113,5,101,0,0,113,18,1,0,0,0,114,115,5,98,
        0,0,115,116,5,114,0,0,116,117,5,101,0,0,117,118,5,97,0,0,118,119,
        5,107,0,0,119,20,1,0,0,0,120,121,5,99,0,0,121,122,5,111,0,0,122,
        123,5,110,0,0,123,124,5,116,0,0,124,125,5,105,0,0,125,126,5,110,
        0,0,126,127,5,117,0,0,127,128,5,101,0,0,128,22,1,0,0,0,129,130,5,
        40,0,0,130,24,1,0,0,0,131,132,5,41,0,0,132,26,1,0,0,0,133,134,5,
        123,0,0,134,28,1,0,0,0,135,136,5,125,0,0,136,30,1,0,0,0,137,138,
        5,59,0,0,138,32,1,0,0,0,139,140,5,45,0,0,140,34,1,0,0,0,141,142,
        5,33,0,0,142,36,1,0,0,0,143,144,5,43,0,0,144,38,1,0,0,0,145,146,
        5,42,0,0,146,40,1,0,0,0,147,148,5,47,0,0,148,42,1,0,0,0,149,150,
        5,37,0,0,150,44,1,0,0,0,151,152,5,38,0,0,152,153,5,38,0,0,153,46,
        1,0,0,0,154,155,5,124,0,0,155,156,5,124,0,0,156,48,1,0,0,0,157,158,
        5,61,0,0,158,159,5,61,0,0,159,50,1,0,0,0,160,161,5,33,0,0,161,162,
        5,61,0,0,162,52,1,0,0,0,163,164,5,60,0,0,164,54,1,0,0,0,165,166,
        5,60,0,0,166,167,5,61,0,0,167,56,1,0,0,0,168,169,5,62,0,0,169,58,
        1,0,0,0,170,171,5,62,0,0,171,172,5,61,0,0,172,60,1,0,0,0,173,175,
        7,0,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,
        1,0,0,0,177,62,1,0,0,0,178,182,7,1,0,0,179,181,7,2,0,0,180,179,1,
        0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,64,1,0,
        0,0,184,182,1,0,0,0,185,186,7,3,0,0,186,187,1,0,0,0,187,188,6,32,
        0,0,188,66,1,0,0,0,189,190,5,47,0,0,190,191,5,47,0,0,191,195,1,0,
        0,0,192,194,9,0,0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,196,1,0,
        0,0,195,193,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,198,200,5,13,
        0,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,202,5,10,
        0,0,202,203,1,0,0,0,203,204,6,33,0,0,204,68,1,0,0,0,205,206,5,47,
        0,0,206,207,5,42,0,0,207,211,1,0,0,0,208,210,9,0,0,0,209,208,1,0,
        0,0,210,213,1,0,0,0,211,212,1,0,0,0,211,209,1,0,0,0,212,214,1,0,
        0,0,213,211,1,0,0,0,214,215,5,42,0,0,215,216,5,47,0,0,216,217,1,
        0,0,0,217,218,6,34,0,0,218,70,1,0,0,0,6,0,176,182,195,199,211,1,
        6,0,0
    ]

class BGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Void = 1
    Int = 2
    Float = 3
    Double = 4
    If = 5
    Else = 6
    For = 7
    Do = 8
    While = 9
    Break = 10
    Continue = 11
    SEP_LParen = 12
    SEP_RParen = 13
    SEP_LBrace = 14
    SEP_RBrace = 15
    SEP_Semicolon = 16
    OP_Minus = 17
    OP_Bang = 18
    OP_Add = 19
    OP_Mul = 20
    OP_Div = 21
    OP_Mod = 22
    OP_LAnd = 23
    OP_LOR = 24
    OP_EQ = 25
    OP_NEQ = 26
    OP_LT = 27
    OP_LE = 28
    OP_GT = 29
    OP_GE = 30
    Literal_Int = 31
    Identifier = 32
    WS = 33
    Line_Comment = 34
    Comment = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'void'", "'int'", "'float'", "'double'", "'if'", "'else'", 
            "'for'", "'do'", "'while'", "'break'", "'continue'", "'('", 
            "')'", "'{'", "'}'", "';'", "'-'", "'!'", "'+'", "'*'", "'/'", 
            "'%'", "'&&'", "'||'", "'=='", "'!='", "'<'", "'<='", "'>'", 
            "'>='" ]

    symbolicNames = [ "<INVALID>",
            "Void", "Int", "Float", "Double", "If", "Else", "For", "Do", 
            "While", "Break", "Continue", "SEP_LParen", "SEP_RParen", "SEP_LBrace", 
            "SEP_RBrace", "SEP_Semicolon", "OP_Minus", "OP_Bang", "OP_Add", 
            "OP_Mul", "OP_Div", "OP_Mod", "OP_LAnd", "OP_LOR", "OP_EQ", 
            "OP_NEQ", "OP_LT", "OP_LE", "OP_GT", "OP_GE", "Literal_Int", 
            "Identifier", "WS", "Line_Comment", "Comment" ]

    ruleNames = [ "Void", "Int", "Float", "Double", "If", "Else", "For", 
                  "Do", "While", "Break", "Continue", "SEP_LParen", "SEP_RParen", 
                  "SEP_LBrace", "SEP_RBrace", "SEP_Semicolon", "OP_Minus", 
                  "OP_Bang", "OP_Add", "OP_Mul", "OP_Div", "OP_Mod", "OP_LAnd", 
                  "OP_LOR", "OP_EQ", "OP_NEQ", "OP_LT", "OP_LE", "OP_GT", 
                  "OP_GE", "Literal_Int", "Identifier", "WS", "Line_Comment", 
                  "Comment" ]

    grammarFileName = "BGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


